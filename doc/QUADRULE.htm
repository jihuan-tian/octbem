<html>

  <head>
    <title>
      QUADRULE - Quadrature Rules
    </title>
  </head>

  <body bgcolor="#EEEEEE" link="#CC0000" alink="#FF3300" vlink="#000055">

    <h1 align = "center">
      QUADRULE <br> Quadrature Rules
    </h1>

    <hr>

    <p>
      <b>QUADRULE</b>
      is a C++ library which
      sets up a variety of
      quadrature rules, used to approximate the integral of a function
      over various domains.
    </p>

    <p>
      QUADRULE returns the abscissas and weights for a variety of
      one dimensional quadrature rules for approximating the integral
      of a function.  The best rule is generally Gauss-Legendre quadrature,
      but other rules offer special features, including the ability to
      handle certain weight functions, to approximate an integral
      on an infinite integration region, or to estimate the approximation
      error.
    </p>

    <h3 align = "center">
      Licensing:
    </h3>

    <p>
      The computer code and data files described and made available on this web page
      are distributed under
      <a href = "../../txt/gnu_lgpl.txt">the GNU LGPL license.</a>
    </p>

    <h3 align = "center">
      Languages:
    </h3>

    <p>
      <b>QUADRULE</b> is available in
      <a href = "../../c_src/quadrule/quadrule.html">a C version</a> and
      <a href = "../../cpp_src/quadrule/quadrule.html">a C++ version</a> and
      <a href = "../../f77_src/quadrule/quadrule.html">a FORTRAN77 version</a> and
      <a href = "../../f_src/quadrule/quadrule.html">a FORTRAN90 version</a> and
      <a href = "../../m_src/quadrule/quadrule.html">a MATLAB version</a> and
      <a href = "../../py_src/quadrule/quadrule.html">a Python version</a>.
    </p>

    <h3 align = "center">
      Related Programs:
    </h3>

    <p>
      <a href = "../../cpp_src/alpert_rule/alpert_rule.html">
      ALPERT_RULE</a>,
      a C++ library which
      can set up an Alpert quadrature rule for functions which are 
      regular, log(x) singular, or 1/sqrt(x) singular.
    </p>

    <p>
      <a href = "../../cpp_src/clenshaw_curtis_rule/clenshaw_curtis_rule.html">
      CLENSHAW_CURTIS_RULE</a>,
      a C++ program which
      defines a Clenshaw Curtis quadrature rule.
    </p>

    <p>
      <a href = "../../cpp_src/kronrod/kronrod.html">
      KRONROD</a>,
      a C++ library which
      can compute a Gauss and Gauss-Kronrod pair of quadrature rules
      of arbitrary order,
      by Robert Piessens, Maria Branders.
    </p>

    <p>
      <a href = "../../cpp_src/line_felippa_rule/line_felippa_rule.html">
      LINE_FELIPPA_RULE</a>,
      a C++ library which
      returns the points and weights of a Felippa quadrature rule
      over the interior of a line segment in 1D.
    </p>

    <p>
      <a href = "../../cpp_src/line_ncc_rule/line_ncc_rule.html">
      LINE_NCC_RULE</a>,
      a C++ library which
      computes a Newton Cotes Closed (NCC) quadrature rule for the line,
      that is, for an interval of the form [A,B], using equally spaced points
      which include the endpoints.
    </p>

    <p>
      <a href = "../../cpp_src/line_nco_rule/line_nco_rule.html">
      LINE_NCO_RULE</a>,
      a C++ library which
      computes a Newton Cotes Open (NCO) quadrature rule,
      using equally spaced points,
      over the interior of a line segment in 1D.
    </p>

    <p>
      <a href = "../../cpp_src/quadmom/quadmom.html">
      QUADMOM</a>,
      a C++ library which
      computes a Gaussian quadrature rule for a weight function rho(x)
      based on the Golub-Welsch procedure that only requires knowledge
      of the moments of rho(x).
    </p>

    <p>
      <a href = "../../datasets/quadrature_rules/quadrature_rules.html">
      QUADRATURE_RULES</a>,
      a dataset directory which
      contains sets of files that define quadrature
      rules over various 1D intervals or multidimensional hypercubes.
    </p>

    <p>
      <a href = "../../m_src/quadrature_test/quadrature_test.html">
      QUADRATURE_TEST</a>,
      a MATLAB program which
      reads the definition of a
      multidimensional quadrature rule from three files, applies
      the rule to a number of test integrals, and prints the
      results.
    </p>

    <p>
      <a href = "../../cpp_src/test_int/test_int.html">
      TEST_INT</a>,
      a C++ library which
      defines test integrands for 1D quadrature rules.
    </p>

    <h3 align = "center">
      Source Code:
    </h3>

    <p>
      <ul>
        <li>
          <a href = "quadrule.cpp">quadrule.cpp</a>, the source code;
        </li>
        <li>
          <a href = "quadrule.hpp">quadrule.hpp</a>, the include file;
        </li>
      </ul>
    </p>

    <h3 align = "center">
      Examples and Tests:
    </h3>

    <p>
      <ul>
        <li>
          <a href = "quadrule_prb.cpp">quadrule_prb.cpp</a>, the calling
          program;
        </li>
        <li>
          <a href = "quadrule_prb_output.txt">quadrule_prb_output.txt</a>,
          the output file.
        </li>
      </ul>
    </p>

    <h3 align = "center">
      List of Routines:
    </h3>

    <p>
      <ul>
        <li>
          <b>CHEBYSHEV_SET</b> sets abscissas and weights for Chebyshev quadrature.
        </li>
        <li>
          <b>CHEBYSHEV1_COMPUTE</b> computes a Gauss-Chebyshev type 1 quadrature rule.
        </li>
        <li>
          <b>CHEBYSHEV1_INTEGRAL</b> evaluates a monomial Chebyshev type 1 integral.
        </li>
        <li>
          <b>CHEBYSHEV1_SET</b> sets a Chebyshev Type 1 quadrature rule.
        </li>
        <li>
          <b>CHEBYSHEV2_COMPUTE</b> computes a Gauss-Chebyshev type 2 quadrature rule.
        </li>
        <li>
          <b>CHEBYSHEV2_INTEGRAL</b> evaluates a monomial Chebyshev type 2 integral.
        </li>
        <li>
          <b>CHEBYSHEV2_SET</b> sets a Chebyshev Type 2 quadrature rule.
        </li>
        <li>
          <b>CHEBYSHEV3_COMPUTE</b> computes a Gauss-Chebyshev type 3 quadrature rule.
        </li>
        <li>
          <b>CHEBYSHEV3_INTEGRAL</b> evaluates a monomial Chebyshev type 3 integral.
        </li>
        <li>
          <b>CHEBYSHEV3_SET</b> sets a Chebyshev Type 3 quadrature rule.
        </li>
        <li>
          <b>CLENSHAW_CURTIS_COMPUTE</b> computes a Clenshaw Curtis quadrature rule.
        </li>
        <li>
          <b>CLENSHAW_CURTIS_SET</b> sets a Clenshaw-Curtis quadrature rule.
        </li>
        <li>
          <b>FEJER1_COMPUTE</b> computes a Fejer type 1 quadrature rule.
        </li>
        <li>
          <b>FEJER1_SET</b> sets abscissas and weights for Fejer type 1 quadrature.
        </li>
        <li>
          <b>FEJER2_COMPUTE</b> computes a Fejer type 2 quadrature rule.
        </li>
        <li>
          <b>FEJER2_SET</b> sets abscissas and weights for Fejer type 2 quadrature.
        </li>
        <li>
          <b>GEGENBAUER_INTEGRAL</b> evaluates the integral of a monomial with Gegenbauer weight.
        </li>
        <li>
          <b>GEGENBAUER_SS_COMPUTE</b> computes a Gauss-Gegenbauer quadrature rule.
        </li>
        <li>
          <b>GEGENBAUER_SS_RECUR:</b> value and derivative of a Gegenbauer polynomial.
        </li>
        <li>
          <b>GEGENBAUER_SS_ROOT</b> improves a root of a Gegenbauer polynomial.
        </li>
        <li>
          <b>GEN_HERMITE_DR_COMPUTE</b> computes a generalized Gauss-Hermite rule.
        </li>
        <li>
          <b>GEN_HERMITE_EK_COMPUTE</b> computes a generalized Gauss-Hermite quadrature rule.
        </li>
        <li>
          <b>GEN_HERMITE_INTEGRAL</b> evaluates a monomial generalized Hermite integral.
        </li>
        <li>
          <b>GEN_LAGUERRE_EK_COMPUTE:</b> generalized Gauss-Laguerre quadrature rule.
        </li>
        <li>
          <b>GEN_LAGUERRE_INTEGRAL</b> evaluates a monomial generalized Laguerre integral.
        </li>
        <li>
          <b>GEN_LAGUERRE_SS_COMPUTE</b> computes a generalized Gauss-Laguerre quadrature rule.
        </li>
        <li>
          <b>GEN_LAGUERRE_SS_RECUR</b> evaluates a generalized Laguerre polynomial.
        </li>
        <li>
          <b>GEN_LAGUERRE_SS_ROOT</b> improves a root of a generalized Laguerre polynomial.
        </li>
        <li>
          <b>HERMITE_EK_COMPUTE</b> computes a Gauss-Hermite quadrature rule.
        </li>
        <li>
          <b>HERMITE_GK16_SET</b> sets a Hermite Genz-Keister 16 rule.
        </li>
        <li>
          <b>HERMITE_GK18_SET</b> sets a Hermite Genz-Keister 18 rule.
        </li>
        <li>
          <b>HERMITE_GK22_SET</b> sets a Hermite Genz-Keister 22 rule.
        </li>
        <li>
          <b>HERMITE_GK24_SET</b> sets a Hermite Genz-Keister 24 rule.
        </li>
        <li>
          <b>HERMITE_INTEGRAL</b> evaluates a monomial Hermite integral.
        </li>
        <li>
          <b>HERMITE_PROBABILIST_SET:</b> probabilist Hermite quadrature.
        </li>
        <li>
          <b>HERMITE_SET</b> sets abscissas and weights for Hermite quadrature.
        </li>
        <li>
          <b>HERMITE_1_SET</b> sets abscissas and weights for Hermite quadrature.
        </li>
        <li>
          <b>HERMITE_SS_COMPUTE</b> computes a Gauss-Hermite quadrature rule.
        </li>
        <li>
          <b>HERMITE_SS_RECUR</b> finds the value and derivative of a Hermite polynomial.
        </li>
        <li>
          <b>HERMITE_SS_ROOT</b> improves an approximate root of a Hermite polynomial.
        </li>
        <li>
          <b>I4_FACTORIAL2</b> computes the double factorial function.
        </li>
        <li>
          <b>I4_MIN</b> returns the smaller of two I4's.
        </li>
        <li>
          <b>I4_POWER</b> returns the value of I^J.
        </li>
        <li>
          <b>IMTQLX</b> diagonalizes a symmetric tridiagonal matrix.
        </li>
        <li>
          <b>JACOBI_EK_COMPUTE:</b> Elhay-Kautsky method for Gauss-Jacobi quadrature rule.
        </li>
        <li>
          <b>JACOBI_INTEGRAL</b> evaluates the integral of a monomial with Jacobi weight.
        </li>
        <li>
          <b>JACOBI_SS_COMPUTE</b> computes a Gauss-Jacobi quadrature rule.
        </li>
        <li>
          <b>JACOBI_SS_RECUR</b> finds the value and derivative of a Jacobi polynomial.
        </li>
        <li>
          <b>JACOBI_SS_ROOT</b> improves an approximate root of a Jacobi polynomial.
        </li>
        <li>
          <b>KRONROD_SET</b> sets abscissas and weights for Gauss-Kronrod quadrature.
        </li>
        <li>
          <b>LAGUERRE_EK_COMPUTE:</b> Laguerre quadrature rule by the Elhay-Kautsky method.
        </li>
        <li>
          <b>LAGUERRE_INTEGRAL</b> evaluates a monomial Laguerre integral.
        </li>
        <li>
          <b>LAGUERRE_SET</b> sets abscissas and weights for Laguerre quadrature.
        </li>
        <li>
          <b>LAGUERRE_1_SET</b> sets abscissas and weights for Laguerre quadrature.
        </li>
        <li>
          <b>LAGUERRE_SS_COMPUTE</b> computes a Gauss-Laguerre quadrature rule.
        </li>
        <li>
          <b>LAGUERRE_SS_RECUR</b> evaluates a Laguerre polynomial.
        </li>
        <li>
          <b>LAGUERRE_SS_ROOT</b> improves a root of a Laguerre polynomial.
        </li>
        <li>
          <b>LAGUERRE_SUM</b> carries out Laguerre quadrature over [ A, +oo ).
        </li>
        <li>
          <b>LEGENDRE_DR_COMPUTE:</b> Gauss-Legendre quadrature by Davis-Rabinowitz method.
        </li>
        <li>
          <b>LEGENDRE_EK_COMPUTE:</b> Legendre quadrature rule by the Elhay-Kautsky method.
        </li>
        <li>
          <b>LEGENDRE_INTEGRAL</b> evaluates a monomial Legendre integral.
        </li>
        <li>
          <b>LEGENDRE_RECUR</b> finds the value and derivative of a Legendre polynomial.
        </li>
        <li>
          <b>LEGENDRE_SET</b> sets abscissas and weights for Gauss-Legendre quadrature.
        </li>
        <li>
          <b>LOBATTO_COMPUTE</b> computes a Lobatto quadrature rule.
        </li>
        <li>
          <b>LOBATTO_SET</b> sets abscissas and weights for Lobatto quadrature.
        </li>
        <li>
          <b>NC_COMPUTE_WEIGHTS</b> computes weights for a Newton-Cotes quadrature rule.
        </li>
        <li>
          <b>NCC_COMPUTE</b> computes a Newton-Cotes closed quadrature rule.
        </li>
        <li>
          <b>NCC_SET</b> sets abscissas and weights for closed Newton-Cotes quadrature.
        </li>
        <li>
          <b>NCO_COMPUTE</b> computes a Newton-Cotes Open quadrature rule.
        </li>
        <li>
          <b>NCO_SET</b> sets abscissas and weights for open Newton-Cotes quadrature.
        </li>
        <li>
          <b>NCOH_COMPUTE</b> computes a Newton-Cotes "open half" quadrature rule.
        </li>
        <li>
          <b>NCOH_SET</b> sets abscissas and weights for Newton-Cotes "open half" rules.
        </li>
        <li>
          <b>PATTERSON_SET</b> sets abscissas and weights for Gauss-Patterson quadrature.
        </li>
        <li>
          <b>PSI_VALUES</b> returns some values of the Psi or Digamma function.
        </li>
        <li>
          <b>R8_ABS</b> returns the absolute value of an R8.
        </li>
        <li>
          <b>R8_EPSILON</b> returns the R8 roundoff unit.
        </li>
        <li>
          <b>R8_FACTORIAL</b> computes the factorial of N.
        </li>
        <li>
          <b>R8_FACTORIAL2</b> computes the double factorial function.
        </li>
        <li>
          <b>R8_GAMMA</b> evaluates Gamma(X) for a real argument.
        </li>
        <li>
          <b>R8_GAMMA_LOG</b> calculates the natural logarithm of GAMMA ( X ) for positive X.
        </li>
        <li>
          <b>R8_HUGE</b> returns a "huge" R8.
        </li>
        <li>
          <b>R8_HYPER_2F1</b> evaluates the hypergeometric function 2F1(A,B,C,X).
        </li>
        <li>
          <b>R8_MAX</b> returns the maximum of two R8's.
        </li>
        <li>
          <b>R8_PSI</b> evaluates the function Psi(X).
        </li>
        <li>
          <b>R8_SIGN</b> returns the sign of an R8.
        </li>
        <li>
          <b>R8VEC_COPY</b> copies an R8VEC.
        </li>
        <li>
          <b>R8VEC_DOT_PRODUCT</b> computes the dot product of a pair of R8VEC's.
        </li>
        <li>
          <b>R8VEC_LINSPACE</b> creates a vector of linearly spaced values.
        </li>
        <li>
          <b>R8VEC_LINSPACE_NEW</b> creates a vector of linearly spaced values.
        </li>
        <li>
          <b>R8VEC_PRINT</b> prints an R8VEC.
        </li>
        <li>
          <b>R8VEC_REVERSE</b> reverses the elements of an R8VEC.
        </li>
        <li>
          <b>RADAU_COMPUTE</b> computes a Radau quadrature rule.
        </li>
        <li>
          <b>RADAU_SET</b> sets abscissas and weights for Radau quadrature.
        </li>
        <li>
          <b>TIMESTAMP</b> prints the current YMDHMS date as a time stamp.
        </li>
      </ul>
    </p>

    <p>
      You can go up one level to <a href = "../cpp_src.html">
      the C++ source codes</a>.
    </p>

    <hr>

    <i>
      Last revised on 21 June 2015.
    </i>

    <!-- John Burkardt -->

  </body>

</html>
